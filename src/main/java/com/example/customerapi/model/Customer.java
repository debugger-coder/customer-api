
package com.example.customerapi.model;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

/**
 * Customer entity class representing customer information in the system.
 * This is the primary domain model for the Customer API.
 *
 * The class is mapped to a database table named "customers" with a unique constraint
 * on the primaryEmail field to ensure email uniqueness across all customers.
 *
 * Uses Lombok annotations to reduce boilerplate code:
 * - @Data: Generates getters, setters, equals, hashCode, and toString methods
 * - @Builder: Implements the Builder pattern for object creation
 * - @NoArgsConstructor: Generates a no-args constructor (required by JPA)
 * - @AllArgsConstructor: Generates a constructor with all fields as parameters
 */
@Entity
@Table(name = "customers", uniqueConstraints = @UniqueConstraint(columnNames = "primaryEmail"))
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Customer information")
public class Customer {

    /**
     * Unique identifier for the customer.
     * Uses UUID as the primary key type for better distribution and security.
     */
    @Id
    @GeneratedValue
    @Schema(description = "Unique identifier for the customer", example = "123e4567-e89b-12d3-a456-426614174000")
    private UUID customerId;

    /**
     * Customer's first name (given name).
     * This field is required and cannot be blank.
     */
    @NotBlank(message = "First name is required")
    @Schema(description = "Customer's first name", example = "John", required = true)
    private String givenName;

    /**
     * Customer's middle initial or middle name.
     * This field is optional and can be null.
     */
    @Schema(description = "Customer's middle initial or name", example = "A", required = false)
    private String middleInitial;

    /**
     * Customer's last name (surname).
     * This field is required and cannot be blank.
     */
    @NotBlank(message = "Last name is required")
    @Schema(description = "Customer's last name", example = "Doe", required = true)
    private String surname;

    /**
     * Customer's primary email address.
     * This field is required, must be a valid email format, and must be unique across all customers.
     */
    @Email(message = "Email must be valid")
    @NotBlank(message = "Email is required")
    @Schema(description = "Customer's email address (must be unique)",
            example = "john.doe@example.com",
            required = true)
    private String primaryEmail;

    /**
     * Customer's contact phone number.
     * This field is required and cannot be blank.
     * Must match a valid phone number format (e.g., 123-456-7890, (123) 456-7890, etc.)
     */
    @NotBlank(message = "Phone number is required")
    @Pattern(regexp = "^(\\+\\d{1,3}( )?)?((\\(\\d{3}\\))|\\d{3})[- .]?\\d{3}[- .]?\\d{4}$",
             message = "Phone number must be in a valid format (e.g., 123-456-7890)")
    @Schema(description = "Customer's phone number", example = "123-456-7890", required = true)
    private String contactNumber;

    // All getters, setters, equals, hashCode, and toString methods
    // are automatically generated by Lombok's @Data annotation
}
